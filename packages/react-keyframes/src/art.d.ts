declare module "art" {
  /** Declaration file generated by dts-gen */

  export class Color {
    constructor(color: any, type: any);

    toHEX(array: any): any;

    toHSB(array: any): any;

    toHSL(array: any): any;

    toRGB(array: any): any;

    toString(array: any): any;

    static detach(color: any): any;

    static hex(hex: any): any;

    static hsb(h: any, s: any, b: any, a: any): any;

    static hsl(h: any, s: any, l: any, a: any): any;

    static parseHEX(color: any): any;

    static parseHSB(color: any): any;

    static parseHSL(color: any): any;

    static parseRGB(color: any): any;

    static rgb(r: any, g: any, b: any, a: any): any;
  }

  export class Ellipse {
    constructor(a: any, b: any, c: any, d: any, e: any, f: any, g: any, h: any);

    draw(...args: any[]): any;

    initialize(arg: any, ...args: any[]): void;
  }

  export class Font {
    constructor(a: any, b: any, c: any, d: any, e: any, f: any, g: any, h: any);

    draw(...args: any[]): any;

    initialize(arg: any, ...args: any[]): void;

    static register(font: any): any;
  }

  export class Pill {
    constructor(a: any, b: any, c: any, d: any, e: any, f: any, g: any, h: any);

    draw(...args: any[]): any;

    initialize(arg: any, ...args: any[]): void;
  }

  export class Rectangle {
    constructor(a: any, b: any, c: any, d: any, e: any, f: any, g: any, h: any);

    draw(...args: any[]): any;

    initialize(arg: any, ...args: any[]): void;
  }

  export class Transform {
    constructor(a: any, b: any, c: any, d: any, e: any, f: any, g: any, h: any);

    initialize(xx: any, yx: any, xy: any, yy: any, x: any, y: any): any;

    inversePoint(x: any, y: any): any;

    move(x: any, y: any): any;

    moveTo(x: any, y: any): any;

    point(x: any, y: any): any;

    resizeTo(width: any, height: any): any;

    rotate(deg: any, x: any, y: any): any;

    rotateTo(deg: any, x: any, y: any): any;

    scale(x: any, y: any): any;

    scaleTo(x: any, y: any): any;

    transform(xx: any, yx: any, xy: any, yy: any, x: any, y: any): any;

    transformTo(xx: any, yx: any, xy: any, yy: any, x: any, y: any): any;

    translate(x: any, y: any): any;
  }

  export class Wedge {
    constructor(a: any, b: any, c: any, d: any, e: any, f: any, g: any, h: any);

    draw(...args: any[]): any;

    initialize(arg: any, ...args: any[]): void;
  }

  export function ClippingRectangle(): void;

  export function Group(): void;

  export function Path(): void;

  export function Shape(): void;

  export function Surface(): void;

  export function Text(): void;

  export function setCurrent(mode: any): void;
}

declare module "art/morph/path" {
  function Path(path: any): MorphablePath;
  interface MorphablePath {}

  function Tween(from: MorphablePath, to: MorphablePath): Tween;
  interface Tween {
    tween(delta: number): void;
  }
}

declare module "art/core/color";
declare module "art/modes/dom";
declare module "art/modes/current";

// export namespace ClippingRectangle {
//     const prototype: {
//     };

// }

// export namespace Color {
//     namespace detach {
//         const prototype: {
//         };

//     }

//     namespace hex {
//         const prototype: {
//         };

//     }

//     namespace hsb {
//         const prototype: {
//         };

//     }

//     namespace hsl {
//         const prototype: {
//         };

//     }

//     namespace parseHEX {
//         const prototype: {
//         };

//     }

//     namespace parseHSB {
//         const prototype: {
//         };

//     }

//     namespace parseHSL {
//         const prototype: {
//         };

//     }

//     namespace parseRGB {
//         const prototype: {
//         };

//     }

//     namespace prototype {
//         function toHEX(array: any): any;

//         function toHSB(array: any): any;

//         function toHSL(array: any): any;

//         function toRGB(array: any): any;

//         function toString(array: any): any;

//         namespace toHEX {
//             const prototype: {
//             };

//         }

//         namespace toHSB {
//             const prototype: {
//             };

//         }

//         namespace toHSL {
//             const prototype: {
//             };

//         }

//         namespace toRGB {
//             const prototype: {
//             };

//         }

//         namespace toString {
//             const prototype: {
//             };

//         }

//     }

//     namespace rgb {
//         const prototype: {
//         };

//     }

// }

// export namespace Ellipse {
//     namespace prototype {
//         class initialize {
//             constructor(arg: any, ...args: any[]);

//             draw(...args: any[]): any;

//             initialize(arg: any, ...args: any[]): void;

//         }

//         const shape_draw: any;

//         const shape_initialize: any;

//         function draw(...args: any[]): any;

//         namespace draw {
//             const prototype: {
//             };

//         }

//         namespace initialize {
//             namespace prototype {
//                 // Too-deep object hierarchy from art.Ellipse.prototype.initialize.prototype
//                 const draw: any;

//                 // Circular reference from art.Ellipse.prototype.initialize.prototype
//                 const initialize: any;

//                 // Too-deep object hierarchy from art.Ellipse.prototype.initialize.prototype
//                 const shape_draw: any;

//                 // Too-deep object hierarchy from art.Ellipse.prototype.initialize.prototype
//                 const shape_initialize: any;

//             }

//         }

//     }

// }

// export namespace Font {
//     namespace prototype {
//         class initialize {
//             constructor(arg: any, ...args: any[]);

//             draw(...args: any[]): any;

//             initialize(arg: any, ...args: any[]): void;

//         }

//         const shape_draw: any;

//         const shape_initialize: any;

//         function draw(...args: any[]): any;

//         namespace draw {
//             const prototype: {
//             };

//         }

//         namespace initialize {
//             namespace prototype {
//                 // Too-deep object hierarchy from art.Font.prototype.initialize.prototype
//                 const draw: any;

//                 // Circular reference from art.Font.prototype.initialize.prototype
//                 const initialize: any;

//                 // Too-deep object hierarchy from art.Font.prototype.initialize.prototype
//                 const shape_draw: any;

//                 // Too-deep object hierarchy from art.Font.prototype.initialize.prototype
//                 const shape_initialize: any;

//             }

//         }

//     }

//     namespace register {
//         const prototype: {
//         };

//     }

// }

// export namespace Group {
//     const prototype: {
//     };

// }

// export namespace Path {
//     const prototype: {
//     };

// }

// export namespace Pill {
//     namespace prototype {
//         class initialize {
//             constructor(arg: any, ...args: any[]);

//             draw(...args: any[]): any;

//             initialize(arg: any, ...args: any[]): void;

//         }

//         const shape_draw: any;

//         const shape_initialize: any;

//         function draw(...args: any[]): any;

//         namespace draw {
//             const prototype: {
//             };

//         }

//         namespace initialize {
//             namespace prototype {
//                 // Too-deep object hierarchy from art.Pill.prototype.initialize.prototype
//                 const draw: any;

//                 // Circular reference from art.Pill.prototype.initialize.prototype
//                 const initialize: any;

//                 // Too-deep object hierarchy from art.Pill.prototype.initialize.prototype
//                 const shape_draw: any;

//                 // Too-deep object hierarchy from art.Pill.prototype.initialize.prototype
//                 const shape_initialize: any;

//             }

//         }

//     }

// }

// export namespace Rectangle {
//     namespace prototype {
//         class initialize {
//             constructor(arg: any, ...args: any[]);

//             draw(...args: any[]): any;

//             initialize(arg: any, ...args: any[]): void;

//         }

//         const shape_draw: any;

//         const shape_initialize: any;

//         function draw(...args: any[]): any;

//         namespace draw {
//             const prototype: {
//             };

//         }

//         namespace initialize {
//             namespace prototype {
//                 // Too-deep object hierarchy from art.Rectangle.prototype.initialize.prototype
//                 const draw: any;

//                 // Circular reference from art.Rectangle.prototype.initialize.prototype
//                 const initialize: any;

//                 // Too-deep object hierarchy from art.Rectangle.prototype.initialize.prototype
//                 const shape_draw: any;

//                 // Too-deep object hierarchy from art.Rectangle.prototype.initialize.prototype
//                 const shape_initialize: any;

//             }

//         }

//     }

// }

// export namespace Shape {
//     const prototype: {
//     };

// }

// export namespace Surface {
//     const prototype: {
//     };

// }

// export namespace Text {
//     const prototype: {
//     };

// }

// export namespace Transform {
//     namespace prototype {
//         class initialize {
//             constructor(xx: any, yx: any, xy: any, yy: any, x: any, y: any);

//             initialize(xx: any, yx: any, xy: any, yy: any, x: any, y: any): any;

//             inversePoint(x: any, y: any): any;

//             move(x: any, y: any): any;

//             moveTo(x: any, y: any): any;

//             point(x: any, y: any): any;

//             resizeTo(width: any, height: any): any;

//             rotate(deg: any, x: any, y: any): any;

//             rotateTo(deg: any, x: any, y: any): any;

//             scale(x: any, y: any): any;

//             scaleTo(x: any, y: any): any;

//             transform(xx: any, yx: any, xy: any, yy: any, x: any, y: any): any;

//             transformTo(xx: any, yx: any, xy: any, yy: any, x: any, y: any): any;

//             translate(x: any, y: any): any;

//         }

//         class transformTo {
//             constructor(xx: any, yx: any, xy: any, yy: any, x: any, y: any);

//             initialize(xx: any, yx: any, xy: any, yy: any, x: any, y: any): any;

//             inversePoint(x: any, y: any): any;

//             move(x: any, y: any): any;

//             moveTo(x: any, y: any): any;

//             point(x: any, y: any): any;

//             resizeTo(width: any, height: any): any;

//             rotate(deg: any, x: any, y: any): any;

//             rotateTo(deg: any, x: any, y: any): any;

//             scale(x: any, y: any): any;

//             scaleTo(x: any, y: any): any;

//             transform(xx: any, yx: any, xy: any, yy: any, x: any, y: any): any;

//             transformTo(xx: any, yx: any, xy: any, yy: any, x: any, y: any): any;

//             translate(x: any, y: any): any;

//         }

//         const x: number;

//         const xx: number;

//         const xy: number;

//         const y: number;

//         const yx: number;

//         const yy: number;

//         function inversePoint(x: any, y: any): any;

//         function move(x: any, y: any): any;

//         function moveTo(x: any, y: any): any;

//         function point(x: any, y: any): any;

//         function resizeTo(width: any, height: any): any;

//         function rotate(deg: any, x: any, y: any): any;

//         function rotateTo(deg: any, x: any, y: any): any;

//         function scale(x: any, y: any): any;

//         function scaleTo(x: any, y: any): any;

//         function transform(xx: any, yx: any, xy: any, yy: any, x: any, y: any): any;

//         function translate(x: any, y: any): any;

//         namespace initialize {
//             namespace prototype {
//                 // Circular reference from art.Transform.prototype.initialize.prototype
//                 const initialize: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const inversePoint: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const move: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const moveTo: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const point: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const resizeTo: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const rotate: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const rotateTo: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const scale: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const scaleTo: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const transform: any;

//                 // Circular reference from art.Transform.prototype.initialize.prototype
//                 const transformTo: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const translate: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const x: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const xx: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const xy: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const y: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const yx: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.initialize.prototype
//                 const yy: any;

//             }

//         }

//         namespace inversePoint {
//             const prototype: {
//             };

//         }

//         namespace move {
//             const prototype: {
//             };

//         }

//         namespace moveTo {
//             const prototype: {
//             };

//         }

//         namespace point {
//             const prototype: {
//             };

//         }

//         namespace resizeTo {
//             const prototype: {
//             };

//         }

//         namespace rotate {
//             const prototype: {
//             };

//         }

//         namespace rotateTo {
//             const prototype: {
//             };

//         }

//         namespace scale {
//             const prototype: {
//             };

//         }

//         namespace scaleTo {
//             const prototype: {
//             };

//         }

//         namespace transform {
//             const prototype: {
//             };

//         }

//         namespace transformTo {
//             namespace prototype {
//                 // Circular reference from art.Transform.prototype.transformTo.prototype
//                 const initialize: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const inversePoint: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const move: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const moveTo: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const point: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const resizeTo: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const rotate: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const rotateTo: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const scale: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const scaleTo: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const transform: any;

//                 // Circular reference from art.Transform.prototype.transformTo.prototype
//                 const transformTo: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const translate: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const x: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const xx: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const xy: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const y: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const yx: any;

//                 // Too-deep object hierarchy from art.Transform.prototype.transformTo.prototype
//                 const yy: any;

//             }

//         }

//         namespace translate {
//             const prototype: {
//             };

//         }

//     }

// }

// export namespace Wedge {
//     namespace prototype {
//         class initialize {
//             constructor(arg: any, ...args: any[]);

//             draw(...args: any[]): any;

//             initialize(arg: any, ...args: any[]): void;

//         }

//         const shape_draw: any;

//         const shape_initialize: any;

//         function draw(...args: any[]): any;

//         namespace draw {
//             const prototype: {
//             };

//         }

//         namespace initialize {
//             namespace prototype {
//                 // Too-deep object hierarchy from art.Wedge.prototype.initialize.prototype
//                 const draw: any;

//                 // Circular reference from art.Wedge.prototype.initialize.prototype
//                 const initialize: any;

//                 // Too-deep object hierarchy from art.Wedge.prototype.initialize.prototype
//                 const shape_draw: any;

//                 // Too-deep object hierarchy from art.Wedge.prototype.initialize.prototype
//                 const shape_initialize: any;

//             }

//         }

//     }

// }

// export namespace setCurrent {
//     const prototype: {
//     };

// }
